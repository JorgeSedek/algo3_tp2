@startuml
class Juego{
    - INSTANCE {static} : Juego
    -Juego(jugadores)
    + getInstance() {static} : Juego
    +moverVehiculo(Direccion)
    +cambiarJugador();
    +finalizar();
    -agregarPuntuacion(jugador);
    -mostrarTopPuntuaciones();
}

class Ranking {
    - INSTANCE {static} : Ranking
    - Ranking()
    + getInstance() {static} : Ranking
    + agregarPuntaje(Puntaje)
    + mostrar()
    + List<Puntaje> puntajes()
}

interface Direccion{
    +mover(Ubicacion)
    +direccionOpuesta():Direccion
}
class DireccionAbajo{
    +mover(Ubicacion)
    +direccionOpuesta():Direccion
}
class DireccionArriba{
    +mover(Ubicacion)
    +direccionOpuesta():Direccion
}
class DireccionDerecha{
    +mover(Ubicacion)
    +direccionOpuesta():Direccion
}
class DireccionIzquierda{
    +mover(Ubicacion)
    +direccionOpuesta():Direccion
}

class Jugador{
    -nombre : String
    -movimientos : int
    +Jugador(nombreJugador, Vehiculo)
    +incrementarMovimientos(incremento)
    +reducirMovimientos(disminucion)
    +aplicarPorcentajeMovimientos(porcentaje)
    +moverVehiculo(Direccion)
    +cambiarVehiculo(Vehiculo)
    +atravezar(Obstaculo)
    +atravezar(Sorpresa)
    +atravezar(Meta)
    +moverVehiculoSentidoOpuesto();
}

class Puntaje {
- nombreJugador:String
- puntuacion:int
+ Puntaje(Jugador)
}
abstract class Vehiculo {
+Vehiculo(Ubicacion)
+atravesar(Obstaculo) : Efecto {abstract}
+atravesar(Sorpresa) : Efecto {abstract}
+atravesar(Meta) : Efecto
+mover(Direccion) : Casillero
+moverSentidoOpuesto();
}
class Ubicacion {
-fila:int
-columna:int
+Ubicacion(fila,columna)
+mover(DireccionAbajo)
+mover(DireccionArriba)
+mover(DireccionDerecha)
+mover(DireccionIzquierda)
}

Ranking ..> Juego
Ranking *-> "*" Puntaje
Juego *--> "*" Jugador
Jugador *-> Vehiculo
Vehiculo *--> Ubicacion
Vehiculo *--> Direccion

Direccion <|.. DireccionAbajo
Direccion <|.. DireccionArriba
Direccion <|.. DireccionDerecha
Direccion <|.. DireccionIzquierda
@enduml
